'use client'

import { useState } from 'react'
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import { Alert, AlertDescription } from "@/components/ui/alert"
import Link from 'next/link'

export default function Component() {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    registrationNumber: '',
    email: '',
    password: '',
    confirmPassword: '',
    phoneNumber: '',
    branch: '',
    year: ''
  })

  const [errors, setErrors] = useState<Record<string, string>>({})

  const branches = [
    'Computer Science and Engineering',
    'Electronics and Communication Engineering',
    'Electrical Engineering',
    'Mechanical Engineering',
    'Civil Engineering',
    'Chemical Engineering',
    'Production and Industrial Engineering',
    'Biotechnology',
    'Information Technology'
  ]

  const years = [
    { id: 'fresher', label: 'Fresher' },
    { id: 'sophomore', label: 'Sophomore' },
    { id: 'prefinal', label: 'Pre-Final Year' },
    { id: 'final', label: 'Final Year' }
  ]

  const validateForm = () => {
    const newErrors: Record<string, string> = {}

    if (!formData.firstName.trim()) {
      newErrors.firstName = 'First name is required'
    }

    if (!formData.lastName.trim()) {
      newErrors.lastName = 'Last name is required'
    }

    if (!formData.registrationNumber.trim()) {
      newErrors.registrationNumber = 'Registration number is required'
    } else if (!/^\d{8}$/.test(formData.registrationNumber)) {
      newErrors.registrationNumber = 'Registration number must be 8 digits'
    }

    if (!formData.email.trim()) {
      newErrors.email = 'Email is required'
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      newErrors.email = 'Invalid email format'
    }

    if (!formData.password.trim()) {
      newErrors.password = 'Password is required'
    } else if (formData.password.length < 8) {
      newErrors.password = 'Password must be at least 8 characters'
    }

    if (formData.password !== formData.confirmPassword) {
      newErrors.confirmPassword = 'Passwords do not match'
    }

    if (!formData.phoneNumber.trim()) {
      newErrors.phoneNumber = 'Phone number is required'
    } else if (!/^\d{10}$/.test(formData.phoneNumber)) {
      newErrors.phoneNumber = 'Phone number must be 10 digits'
    }

    if (!formData.branch) {
      newErrors.branch = 'Branch is required'
    }

    if (!formData.year) {
      newErrors.year = 'Year is required'
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (validateForm()) {
      try {
        // Handle registration logic here
        console.log('Registration data:', formData)
      } catch (error) {
        setErrors({ submit: 'Registration failed. Please try again.' })
      }
    }
  }

  return (
    <div className="min-h-screen w-full flex items-center justify-center bg-[#1e2830] py-12">
      <div className="w-full max-w-xl p-8 rounded-lg relative">
        {/* Glow effect */}
        <div className="absolute inset-0 rounded-lg bg-gradient-to-r from-[#4a5d5780] to-[#2c353b80] blur-xl" />
        
        {/* Content */}
        <div className="relative bg-[#1e2830] rounded-lg p-8 shadow-xl border border-[#4a5d5730]">
          <h1 className="text-3xl font-bold text-white text-center mb-8">Register</h1>
          
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="firstName" className="text-white">First Name</Label>
                <Input
                  id="firstName"
                  value={formData.firstName}
                  onChange={(e) => setFormData({ ...formData, firstName: e.target.value })}
                  className="bg-[#2c353b] border-[#4a5d5750] text-white placeholder:text-gray-400
                           focus:border-[#97b89d] focus:ring-[#97b89d] transition-colors"
                />
                {errors.firstName && (
                  <p className="text-red-400 text-sm">{errors.firstName}</p>
                )}
              </div>

              <div className="space-y-2">
                <Label htmlFor="lastName" className="text-white">Last Name</Label>
                <Input
                  id="lastName"
                  value={formData.lastName}
                  onChange={(e) => setFormData({ ...formData, lastName: e.target.value })}
                  className="bg-[#2c353b] border-[#4a5d5750] text-white placeholder:text-gray-400
                           focus:border-[#97b89d] focus:ring-[#97b89d] transition-colors"
                />
                {errors.lastName && (
                  <p className="text-red-400 text-sm">{errors.lastName}</p>
                )}
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="registrationNumber" className="text-white">Registration Number</Label>
              <Input
                id="registrationNumber"
                value={formData.registrationNumber}
                onChange={(e) => setFormData({ ...formData, registrationNumber: e.target.value })}
                maxLength={8}
                className="bg-[#2c353b] border-[#4a5d5750] text-white placeholder:text-gray-400
                         focus:border-[#97b89d] focus:ring-[#97b89d] transition-colors"
              />
              {errors.registrationNumber && (
                <p className="text-red-400 text-sm">{errors.registrationNumber}</p>
              )}
            </div>

            <div className="space-y-2">
              <Label htmlFor="email" className="text-white">Email</Label>
              <Input
                id="email"
                type="email"
                value={formData.email}
                onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                className="bg-[#2c353b] border-[#4a5d5750] text-white placeholder:text-gray-400
                         focus:border-[#97b89d] focus:ring-[#97b89d] transition-colors"
              />
              {errors.email && (
                <p className="text-red-400 text-sm">{errors.email}</p>
              )}
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="password" className="text-white">Password</Label>
                <Input
                  id="password"
                  type="password"
                  value={formData.password}
                  onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                  className="bg-[#2c353b] border-[#4a5d5750] text-white placeholder:text-gray-400
                           focus:border-[#97b89d] focus:ring-[#97b89d] transition-colors"
                />
                {errors.password && (
                  <p className="text-red-400 text-sm">{errors.password}</p>
                )}
              </div>

              <div className="space-y-2">
                <Label htmlFor="confirmPassword" className="text-white">Confirm Password</Label>
                <Input
                  id="confirmPassword"
                  type="password"
                  value={formData.confirmPassword}
                  onChange={(e) => setFormData({ ...formData, confirmPassword: e.target.value })}
                  className="bg-[#2c353b] border-[#4a5d5750] text-white placeholder:text-gray-400
                           focus:border-[#97b89d] focus:ring-[#97b89d] transition-colors"
                />
                {errors.confirmPassword && (
                  <p className="text-red-400 text-sm">{errors.confirmPassword}</p>
                )}
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="phoneNumber" className="text-white">Phone Number</Label>
              <Input
                id="phoneNumber"
                value={formData.phoneNumber}
                onChange={(e) => setFormData({ ...formData, phoneNumber: e.target.value })}
                maxLength={10}
                className="bg-[#2c353b] border-[#4a5d5750] text-white placeholder:text-gray-400
                         focus:border-[#97b89d] focus:ring-[#97b89d] transition-colors"
              />
              {errors.phoneNumber && (
                <p className="text-red-400 text-sm">{errors.phoneNumber}</p>
              )}
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="branch" className="text-white">Branch</Label>
                <Select
                  value={formData.branch}
                  onValueChange={(value) => setFormData({ ...formData, branch: value })}
                >
                  <SelectTrigger className="bg-[#2c353b] border-[#4a5d5750] text-white">
                    <SelectValue placeholder="Select branch" />
                  </SelectTrigger>
                  <SelectContent>
                    {branches.map((branch) => (
                      <SelectItem key={branch} value={branch}>
                        {branch}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                {errors.branch && (
                  <p className="text-red-400 text-sm">{errors.branch}</p>
                )}
              </div>

              <div className="space-y-2">
                <Label htmlFor="year" className="text-white">Year</Label>
                <Select
                  value={formData.year}
                  onValueChange={(value) => setFormData({ ...formData, year: value })}
                >
                  <SelectTrigger className="bg-[#2c353b] border-[#4a5d5750] text-white">
                    <SelectValue placeholder="Select year" />
                  </SelectTrigger>
                  <SelectContent>
                    {years.map((year) => (
                      <SelectItem key={year.id} value={year.id}>
                        {year.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                {errors.year && (
                  <p className="text-red-400 text-sm">{errors.year}</p>
                )}
              </div>
            </div>

            {errors.submit && (
              <Alert variant="destructive">
                <AlertDescription>{errors.submit}</AlertDescription>
              </Alert>
            )}

            <Button
              type="submit"
              className="w-full bg-[#97b89d] hover:bg-[#7a9c80] text-white font-medium py-2 px-4 rounded
                       transition-colors duration-200"
            >
              Register
            </Button>
          </form>

          <div className="mt-6 text-center">
            <Link
              href="/login"
              className="text-[#97b89d] hover:text-[#7a9c80] text-sm transition-colors"
            >
              Already have an account? Login
            </Link>
          </div>
        </div>
      </div>
    </div>
  )
}
